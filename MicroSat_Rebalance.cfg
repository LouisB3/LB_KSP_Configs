//MicroSat SAS starts at Level 0 and is upgraded to Level 1 with tech unlocks
//Tweak electricity consumption for command, hibernation, reaction wheel
@PART[MicroSat] {
  @MODULE[ModuleCommand]
  {
    @RESOURCE[ElectricCharge]{
      @rate = 0.004
    }
    hasHibernation = True
  }
  MODULE {
    name = ModuleSAS
    SASServiceLevel = 0
    UPGRADES{
      UPGRADE{
        name__ = MicroSat-SAS-1
        description__ = Prograde/Retrograde Hold
        techRequired__ = precisionEngineering
        SASServiceLevel = 1
      }
    }
  }
  @MODULE[ModuleReactionWheel]{
    @RESOURCE[ElectricCharge]{
      @rate = 0.004
    }
  }
}

PARTUPGRADE
{
	name = MicroSat-SAS-1
	partIcon = MicroSat
	techRequired = precisionEngineering
	entryCost = 1400
	cost = 0 // for display only; all parts implementing this will need a PartStatsUpgradeModule with cost = this.
	title = MicroSat SAS Upgrade
	//basicInfo = Whatever\nblah
	manufacturer = Squiggsy Space Research
	description = Telemetry enhancements allow MicroSats to hold prograde and retrograde.
}

//Hide SAS upgrade chip as it has been replaced with Part Upgrades
@PART[SASupgradeChip]{
  @MODULE[ModuleSAS]{
    @SASServiceLevel = 3
  }
  @TechRequired = unresearchable
  @category = -1
}

//Balance battery against stock
@PART[MICROBATSQUARE]{
  @category = Electrical
  @mass = 0.003
  @RESOURCE[ElectricCharge]{
    @amount = 60
    @maxAmount = 60
  }
}

//Balance liquid fuel engine against RLA Aphid
@PART[microsatEngine]{
  @cost = 60
  @MODULE[ModuleEngines]{
    @maxThrust = 1
    !atmosphereCurve{}
    atmosphereCurve
    {
       key = 0 310
       key = 1 70
       key = 3 0.001
    }
  }
}

//Balance upper stage engine against Near Future Spacecraft TV-95
@PART[upperStageEngine]{
  @cost = 450
  @mass = 0.12
  @MODULE[ModuleEnginesFX]{
    @maxThrust = 13.5
    !atmosphereCurve{}
    atmosphereCurve
    {
      key = 0 335
			key = 1 190
			key = 4 70
    }
  }
}

//Balance liquid fuel tanks against stock
@PART[microlqdfuel]{
  @mass = 0.0084
}

@PART[625liquidFuel]{
  @mass = 0.05
}

//Balance RTG against RLA/stock
@PART[micrortg]{
  @category = Electrical
  @cost = 3700
  @mass = 0.013
  @MODULE[ModuleGenerator]{
    @OUTPUT_RESOURCE[ElectricCharge]{
      @rate = 0.122
    }
  }
  @TechRequired = experimentalElectrics
}

//Balance solar against stock
@PART[microSolarUnshielded]{
  @category = Electrical
  @MODULE[ModuleDeployableSolarPanel]{
    @chargeRate = 0.8
    retractable = false
  }
}

//Balance decouplers against stock
@PART[625decoupler]{
  @category = Coupling
  @mass = 0.015
  @cost = 300
  @MODULE[ModuleDecouple]{
    @ejectionForce = 15
  }
}

@PART[35decoupler]{
  @category = Coupling
  @mass = 0.005
  @cost = 25
}

//Balance xenon tanks against stock
@PART[microXenon]{
  @mass = 0.012
  @TechRequired = ionPropulsion
}

@PART[radialXenonmicro]{
  @mass = 0.002
  @TechRequired = ionPropulsion
}

@PART[microIon]{
  @TechRequired = ionPropulsion
}

//Balance fairing against stock
@PART[fairingSize0]{
  @name = AE-FF1 Airstream Protective Shell (0.625m)
  @category = Payload
  @mass = 0.04
  @MODULE[ModuleProceduralFairing]{
    @UnitAreaMass = 0.01
    @UnitAreaCost = 2
  }
  @TechRequired = advConstruction
}

//To do: replace resource scanner with KerbNet access

//To do: overhaul three antennas
//folded dipole should be external equivalent of internal antenna
//fixed dish should be a low-end relay antenna
//folding dish should be a low-end direct antenna

//To do: balance SRB against RLA/SpaceY
